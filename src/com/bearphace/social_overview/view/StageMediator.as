package com.bearphace.social_overview.view {	import org.puremvc.as3.interfaces.INotification;	import org.puremvc.as3.interfaces.IMediator;	import com.bearphace.social_overview.view.pages.IntroPage;	import com.bearphace.social_overview.ApplicationFacade;	import com.bearphace.social_overview.model.SiteDataProxy;	import com.bearphace.social_overview.model.StyleSheetProxy;	import com.bearphace.social_overview.view.component.MainNavigation;	import flash.display.Sprite;	import flash.display.Stage;	import org.puremvc.as3.patterns.mediator.Mediator;	import org.puremvc.as3.utilities.startupmanager.model.StartupMonitorProxy;						/**	 * @author Mbeng Bernard Ngassa aka:bNard	 * Mar 12, 2009	 */        /**     * A Mediator for interacting with the Stage.     */    public class StageMediator extends Mediator implements IMediator    {        // Cannonical name of the Mediator        public static const NAME:String = "StageMediator";        private var _styleSheetProxy:StyleSheetProxy;        private var _siteDataProxy:SiteDataProxy;        		private var container : Sprite;		private var mainNav : MainNavigation;		private var introPage : IntroPage;       				public function StageMediator( viewComponent:Object )         {            super( NAME, viewComponent );        }        override public function listNotificationInterests():Array         {            return [             		StartupMonitorProxy.LOADING_PROGRESS,				StartupMonitorProxy.LOAD_RESOURCE_TIMED_OUT,				StartupMonitorProxy.LOADING_COMPLETE,				StartupMonitorProxy.LOADING_FINISHED_INCOMPLETE,				StartupMonitorProxy.CALL_OUT_OF_SYNC_IGNORED,				ApplicationFacade.STYLE_SHEET_LOADING,				ApplicationFacade.STYLE_SHEET_LOADED,				ApplicationFacade.STYLE_SHEET_FAILED,				ApplicationFacade.SITE_DATA_LOADING,				ApplicationFacade.SITE_DATA_LOADED,				ApplicationFacade.SITE_DATA_FAILED,				];        }        /**         * Called by the framework when a notification is sent that         * this mediator expressed an interest in.         */        override public function handleNotification( note:INotification ):void         {   			switch ( note.getName() )			{				case ApplicationFacade.STYLE_SHEET_LOADING:					trace( "Loading StyleSheet...");                    break;                case ApplicationFacade.STYLE_SHEET_LOADED: 					trace( "StyleSheet Loaded");                    break;                case ApplicationFacade.SITE_DATA_LOADING:					trace( "Loading Site Data...");                    break;                case ApplicationFacade.SITE_DATA_LOADED: 					trace( "Site Data Loaded");                    break;				/*					case StartupMonitorProxy.LOAD_RESOURCES_REJECTED:                case StartupMonitorProxy.CALL_OUT_OF_SYNC_IGNORED:                    trace( "Abnormal State, Abort" );                    break;                     *                      */                case StartupMonitorProxy.LOADING_PROGRESS:					var perc:Number = note.getBody() as Number;                    trace( "Loading Progress: " + perc + "%" );                    break;                                    case StartupMonitorProxy.LOADING_COMPLETE:                    trace( ">>> Loading Complete" );					initializeView();                    break;                case StartupMonitorProxy.LOADING_FINISHED_INCOMPLETE:                    trace( "XXX - Loading Finished Incomplete - XXX" );                                   break;			}		}								/**        * Called to handle the INITIALIZE_SITE notification.        * Creates SiteMediator, NavMediator, BodyMediator to provide        * PureMVC functionality to the varies view components of the application.        */        private function initializeView():void        {        	// initialise Base UI        	container = new Sprite();			stage.addChild(container);				        _styleSheetProxy = facade.retrieveProxy( StyleSheetProxy.NAME ) as StyleSheetProxy;			_siteDataProxy = facade.retrieveProxy( SiteDataProxy.NAME ) as SiteDataProxy;			mainNav = new MainNavigation();			introPage = new IntroPage();			introPage.data (_siteDataProxy.intro_txt);			stage.addChild(mainNav);			container.addChild(introPage);						          //	stage.addEventListener(Event.RESIZE, resizeHandler);			//stage.addEventListener(MouseEvent.MOUSE_MOVE, adjustStage);	       				trace (" we are ready to blow!!! ?")	       				// Register Mediators	       	//	       	var introCardMediator : IntroCardMediator = facade.retrieveMediator(IntroCardMediator.NAME) as IntroCardMediator;//	       	var logoCardMediator : LogoCardMediator = facade.retrieveMediator(LogoCardMediator.NAME) as LogoCardMediator;//	       	var openCardsMediator : OpenCardsMediator = facade.retrieveMediator(OpenCardsMediator.NAME) as OpenCardsMediator;//	       	var startScreenMediator : StartScreenMediator = facade.retrieveMediator(StartScreenMediator.NAME) as StartScreenMediator;//			facade.registerMediator(new LogoCardMediator(logoCard));//	      	facade.registerMediator(new IntroCardMediator(introCard));//	      	facade.registerMediator(new OpenCardsMediator(openCardsScreen));//	      	facade.registerMediator(new StartScreenMediator(startScreen));		}		/**		 * Retrieves the viewComponent and casting it to type Stage		 */		public function get stage():Stage		{		    return viewComponent as Stage;		}
			}}